# Task 9

def memoize(func):
    """
    Декоратор для запам'ятовування результатів функції (кешування).

    Аргументи:
    func (function): Функція, результати якої потрібно кешувати.

    Повертає:
    function: Функція з кешуванням результатів.
    """
    cache = {}

    def memoized_func(*args):
        """
        Перевіряє, чи є результат у кеші. Якщо ні, обчислює його і додає в кеш.

        Аргументи:
        *args: Аргументи для функції.

        Повертає:
        результат функції або кешований результат.
        """
        if args in cache:
            return cache[args]
        result = func(*args)
        cache[args] = result
        return result

    return memoized_func


@memoize
def factorial(n):
    """
    Обчислює факторіал числа з використанням рекурсії.

    Аргументи:
    n (int): Число, для якого потрібно обчислити факторіал.

    Повертає:
    int: Факторіал числа n.
    """
    if n == 0:
        return 1
    return n * factorial(n - 1)


@memoize
def fibonacci(n):
    """
    Обчислює n-не число Фібоначчі з використанням рекурсії.

    Аргументи:
    n (int): Індекс числа Фібоначчі, яке потрібно обчислити.

    Повертає:
    int: n-не число Фібоначчі.
    """
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)


# Виклики функцій з кешуванням
print(factorial(5))  # Очікуваний результат: 120
print(factorial(6))  # Очікуваний результат: 720

print(fibonacci(10))  # Очікуваний результат: 55
print(fibonacci(20))  # Очікуваний результат: 6765
